--- CcspCommonLibrary/source/util_api/ccsp_msg_bus/ccsp_message_bus.c.orig2	2014-08-15 09:17:22.080316459 -0600
+++ CcspCommonLibrary/source/util_api/ccsp_msg_bus/ccsp_message_bus.c	2014-08-15 09:21:13.976319683 -0600
@@ -19,7 +19,6 @@
 #include <string.h>
 #include <pthread.h>
 #include <dbus/dbus.h>
-#include <dbus/dbus-mainloop.h>
 #include <ccsp_message_bus.h>
 #include "ccsp_base_api.h"
 #include "ccsp_trace.h"
@@ -37,8 +36,8 @@
 #endif
 
 // EXTERNAL
-extern void _dbus_connection_lock (DBusConnection *connection);
-extern void _dbus_connection_unlock (DBusConnection *connection);
+extern void dbus_connection_lock (DBusConnection *connection);
+extern void dbus_connection_unlock (DBusConnection *connection);
 
 extern CCSP_DEADLOCK_DETECTION_INFO deadlock_detection_info;
 extern int   CcspBaseIf_timeout_protect_plus_seconds;
@@ -205,7 +204,7 @@
 {
     CData *cd = data;
 
-    return _dbus_loop_add_watch 
+    return dbus_loop_add_watch 
                (
                    cd->loop,
                    watch
@@ -227,7 +226,7 @@
 {
     CData *cd = data;
 
-    _dbus_loop_remove_watch 
+    dbus_loop_remove_watch 
         (
              cd->loop,
              watch 
@@ -259,7 +258,7 @@
     {
     CData *cd = data;
 
-    return _dbus_loop_add_timeout 
+    return dbus_loop_add_timeout 
                (
                    cd->loop,
                    timeout 
@@ -281,7 +280,7 @@
 {
     CData *cd = data;
 
-    _dbus_loop_remove_timeout 
+    dbus_loop_remove_timeout 
         (
             cd->loop,
             timeout 
@@ -309,7 +308,7 @@
     cd->connection = connection;
 
     dbus_connection_ref (cd->connection);
-    _dbus_loop_ref (cd->loop);
+    dbus_loop_ref (cd->loop);
 
     return cd;
 }
@@ -323,7 +322,7 @@
     CData *cd = data;
 
     dbus_connection_unref (cd->connection);
-    _dbus_loop_unref (cd->loop);
+    dbus_loop_unref (cd->loop);
 
     dbus_free (cd);
 }
@@ -362,8 +361,8 @@
 
     if (new_status != DBUS_DISPATCH_COMPLETE)
     {
-        while ( ! _dbus_loop_queue_dispatch (loop, connection))
-            _dbus_wait_for_memory ();
+        while ( ! dbus_loop_queue_dispatch (loop, connection))
+            dbus_wait_for_memory ();
     }
 }
 
@@ -521,7 +520,7 @@
     // check dispatch status
     if (dbus_connection_get_dispatch_status (connection) != DBUS_DISPATCH_COMPLETE)
     {
-        if ( ! _dbus_loop_queue_dispatch (loop, connection))
+        if ( ! dbus_loop_queue_dispatch (loop, connection))
             goto NO_MEM;
     }
 
@@ -577,7 +576,7 @@
 )
 {
     DBusLoop *loop = (DBusLoop *)ptr;
-    _dbus_loop_run (loop); // main loop, does _ref and _unref
+    dbus_loop_run (loop); // main loop, does _ref and _unref
     return NULL;
 }
 
@@ -942,7 +941,7 @@
                     */
 
         // start the loop and connect threads, should be just one of each, even if count > 1
-        bus_info->connection[count].loop = _dbus_loop_new();
+        bus_info->connection[count].loop = dbus_loop_new();
         pthread_create
             (
                 &thread_dbus_loop, 
@@ -1074,7 +1073,7 @@
 
         if(bus_info->connection[i].loop )
         {
-            _dbus_loop_quit (bus_info->connection[i].loop);
+            dbus_loop_quit (bus_info->connection[i].loop);
         }
     }
 
@@ -1567,7 +1566,7 @@
     }
 
     // get reply
-    _dbus_connection_lock(conn);
+    dbus_connection_lock(conn);
     reply = dbus_pending_call_steal_reply(pcall);
 
     if(!reply)
@@ -1587,7 +1586,7 @@
         pthread_mutex_lock(&cb_data->count_mutex);
         dbus_pending_call_set_notify (pcall, ccsp_msg_check_resp_sync, (void *)cb_data, NULL);
 
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
 
 #ifndef WIN32 
         gettimeofday(&now, NULL);
@@ -1626,7 +1625,7 @@
     }
     else
     {
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
         ret = analyze_reply(message, reply, NULL);
     }
 
@@ -1703,7 +1702,7 @@
         goto EXIT;
     }
 
-    _dbus_connection_lock(conn);
+    dbus_connection_lock(conn);
     reply = dbus_pending_call_steal_reply(pcall);
     if( ! reply)  
 {
@@ -1719,7 +1718,7 @@
         if( ! cb_data)
     {
             CcspTraceError(("<%s>: cb_data malloc fail \n", __FUNCTION__));
-            _dbus_connection_unlock(conn);
+            dbus_connection_unlock(conn);
             ret = CCSP_Message_Bus_OOM;
             goto EXIT;
         }
@@ -1732,7 +1731,7 @@
         pthread_mutex_lock(&cb_data->count_mutex);
         dbus_pending_call_set_notify (pcall, ccsp_msg_check_resp_sync, (void *)cb_data, NULL);
 
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
 
 #ifndef WIN32 
         gettimeofday(&now, NULL);
@@ -1771,7 +1770,7 @@
 }
     else
 {
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
         ret = analyze_reply(message, reply, result);
 }
 
--- CcspCommonLibrary/source/ccsp/include/ccsp_message_bus.h.orig2	2014-08-15 09:20:22.192318963 -0600
+++ CcspCommonLibrary/source/ccsp/include/ccsp_message_bus.h	2014-08-15 09:20:47.396319314 -0600
@@ -56,7 +56,6 @@
 #ifndef CCSP_MESSAGE_BUS_H
 #define CCSP_MESSAGE_BUS_H
 #include <dbus/dbus.h>
-#include <dbus/dbus-mainloop.h>
 
 /*
 notes: see readme.txt
